java: constructor CustomerProcessor in class com.stuti.batch_processing.config.CustomerProcessor cannot be applied to given types;
  required: com.stuti.batch_processing.repository.CustomerRepository
  found: no arguments
  reason: actual and formal argument lists differ in length



# Log level for CustomerProcessor
logging.level.com.stuti.batch_processing.config.CustomerProcessor=error

# Global logging level (info and above)
logging.level.root=info

# Log file location
logging.file.name=logs/application.log

# Logging pattern (format for log messages)
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n



package com.stuti.batch_processing.config;

import com.stuti.batch_processing.model.Customer;
import com.stuti.batch_processing.repository.CustomerRepository;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.stereotype.Component;
import org.springframework.beans.factory.annotation.Autowired;

import javax.validation.ValidationException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.regex.Pattern;

@Component
public class CustomerProcessor implements ItemProcessor<Customer, Customer> {

    private static final Logger logger = LogManager.getLogger(CustomerProcessor.class);  // Log4j2 logger

    @Autowired
    private CustomerRepository customerRepository;

    private static final Pattern EMAIL_PATTERN = Pattern.compile("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$");
    private static final Pattern PHONE_PATTERN = Pattern.compile("^[0-9]{10}$");
    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("dd/MM/yyyy");

    @Override
    public Customer process(Customer customer) throws Exception {
        // Validate email
        if (!isValidEmail(customer.getEmailAddress())) {
            logger.error("Invalid email address: {} for customer ID: {}", customer.getEmailAddress(), customer.getCustomerId());
            return null;
        }

        // Validate phone number
        if (!isValidPhoneNumber(customer.getPhoneNumber())) {
            logger.error("Invalid phone number: {} for customer ID: {}", customer.getPhoneNumber(), customer.getCustomerId());
            return null;
        }

        // Validate first and last name (should not be null or blank)
        if (customer.getFirstName() == null || customer.getFirstName().trim().isEmpty()) {
            logger.error("First name is missing for customer ID: {}", customer.getCustomerId());
            return null;
        }

        if (customer.getLastName() == null || customer.getLastName().trim().isEmpty()) {
            logger.error("Last name is missing for customer ID: {}", customer.getCustomerId());
            return null;
        }

        // Validate date of birth (dob) format
        if (!isValidDateOfBirth(customer.getDob())) {
            logger.error("Invalid date of birth: {} for customer ID: {}", customer.getDob(), customer.getCustomerId());
            return null;
        }

        // Simply return the customer; Spring Data JPA will handle insert or update
        return customer;
    }

    // Method to validate email format
    private boolean isValidEmail(String email) {
        return EMAIL_PATTERN.matcher(email).matches();
    }

    // Method to validate phone number format (must be 10 digits)
    private boolean isValidPhoneNumber(String phoneNumber) {
        return PHONE_PATTERN.matcher(phoneNumber).matches();
    }

    // Method to validate date of birth format (must be in the format dd/MM/yyyy)
    private boolean isValidDateOfBirth(String dob) {
        try {
            DATE_FORMAT.setLenient(false);
            DATE_FORMAT.parse(dob);  // Parse dob to check if the format is valid
            return true;
        } catch (ParseException e) {
            return false;  // Invalid date format
        }
    }
}



2024-10-08 23:36:12 [SimpleAsyncTaskExecutor-2] ERROR c.s.b.config.CustomerProcessor - Invalid email address: john for customer ID: 1
2024-10-08 23:36:12 [SimpleAsyncTaskExecutor-1] ERROR c.s.b.config.CustomerProcessor - Invalid date of birth: 20/06/1972 for customer ID: 3
2024-10-08 23:36:12 [SimpleAsyncTaskExecutor-3] ERROR c.s.b.config.CustomerProcessor - Invalid date of birth: 07/11/1970 for customer ID: 4
2024-10-08 23:36:12 [SimpleAsyncTaskExecutor-4] ERROR c.s.b.config.CustomerProcessor - Invalid date of birth: 20/06/1972 for customer ID: 2
2024-10-08 23:36:12 [main] ERROR o.s.batch.core.step.AbstractStep - Encountered an error executing step csv-step in job importCustomer
java.lang.NumberFormatException: For input string: "51.E511E1"
	at sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:2043)
	at sun.misc.FloatingDecimal.parseDouble(FloatingDecimal.java:110)
	at java.lang.Double.parseDouble(Double.java:538)
	at java.text.DigitList.getDouble(DigitList.java:169)
	at java.text.DecimalFormat.parse(DecimalFormat.java:2089)
	at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:1869)
	at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:1514)
	at java.text.DateFormat.parse(DateFormat.java:364)
	at com.stuti.batch_processing.config.CustomerProcessor.isValidDateOfBirth(CustomerProcessor.java:82)
	at com.stuti.batch_processing.config.CustomerProcessor.process(CustomerProcessor.java:59)
	at com.stuti.batch_processing.config.CustomerProcessor.process(CustomerProcessor.java:17)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.doProcess(SimpleChunkProcessor.java:134)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.transform(SimpleChunkProcessor.java:319)
	at org.springframework.batch.core.step.item.SimpleChunkProcessor.process(SimpleChunkProcessor.java:210)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:77)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottlingRunnable.run(SimpleAsyncTaskExecutor.java:286)
	at java.lang.Thread.run(Thread.java:750)
2024-10-08 23:36:12 [main] INFO  o.s.batch.core.step.AbstractStep - Step: [csv-step] executed in 94ms
2024-10-08 23:36:12 [main] INFO  o.s.b.c.l.support.SimpleJobLauncher - Job: [FlowJob: [name=importCustomer]] completed with the following parameters: [{}] and the following status: [FAILED] in 122ms

